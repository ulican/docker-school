version: 2.1

# Executors define reusable execution environments
# Node executor for Railway CLI deployment
executors:
  docker-executor:
    docker:
      - image: cimg/node:18.20 # Node.js image with npm for Railway CLI
    working_directory: ~/project

jobs:
  build:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker # Enables Docker daemon access without version lock-in
      - run:
          name: Build Docker image
          command: |
            echo "Building Docker image..."
            # Using commit SHA for immutable image tagging - enables rollback & traceability
            docker build -t sod-static:$CIRCLE_SHA1 .
            echo "Build completed: sod-static:$CIRCLE_SHA1"
      - run:
          name: Save Docker image
          command: |
            mkdir -p /tmp/workspace
            # Serialize image to avoid rebuilding in downstream jobs - saves time & compute
            docker save sod-static:$CIRCLE_SHA1 -o /tmp/workspace/image.tar
      - persist_to_workspace: # Share artifacts between jobs - alternative to registry push
          root: /tmp/workspace
          paths:
            - image.tar

  test:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace: # Retrieve build artifacts from previous job
          at: /tmp/workspace
      - run:
          name: Load Docker image
          command: |
            docker load -i /tmp/workspace/image.tar
      - run:
          name: Test Docker container
          command: |
            echo "Testing website..."
            # Black-box integration test - verify service runs as expected in production-like env
            docker run -d --name test-container -p 9090:80 sod-static:$CIRCLE_SHA1
            sleep 10  # Allow service startup time

            # Health checks - fail fast if service isn't responsive
            docker ps | grep test-container
            docker exec test-container curl -f localhost || exit 1

            echo "Tests passed"
      - run:
          name: Cleanup test container
          command: |
            docker stop test-container || true
            docker rm test-container || true
          when: always # Prevent resource leaks even on job failure

  deploy:
    executor: docker-executor
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install Railway CLI
          command: |
            npm install -g @railway/cli
      - run:
          name: Deploy to Railway
          command: |
            echo "Deploying to Railway..."
            docker load -i /tmp/workspace/image.tar

            # Tag pentru Railway
            docker tag sod-static:$CIRCLE_SHA1 sod-static:latest

            # Deploy cu Railway CLI
            railway login --token $RAILWAY_TOKEN
            railway deploy --dockerfile --service sod-static

            echo "Deploy completed!"
            echo "Image: sod-static:$CIRCLE_SHA1"
            echo "Branch: $CIRCLE_BRANCH"

  notify:
    executor: docker-executor
    steps:
      - run:
          name: Send notification
          command: |
            echo "Pipeline completed!"
            echo "Status: Success"
            echo "Repository: $CIRCLE_PROJECT_REPONAME"
            echo "Commit: $CIRCLE_SHA1"
            echo "Branch: $CIRCLE_BRANCH"

            # Production: Integrate with Slack, email, or monitoring systems
            # curl -X POST -H 'Content-type: application/json' \
            #   --data '{"text":"Pipeline completed for '$CIRCLE_PROJECT_REPONAME'"}' \
            #   $SLACK_WEBHOOK_URL

# Workflows orchestrate job execution with dependency management
workflows:
  version: 2
  build-test-deploy: # Sequential pipeline with quality gates
    jobs:
      - build:
          filters:
            branches:
              only: main # Production deployments only from main branch
      - test:
          requires:
            - build # Test phase depends on successful build
          filters:
            branches:
              only: main
      - deploy:
          requires:
            - test # Deploy only if tests pass - fail-fast principle
          filters:
            branches:
              only: main
      - notify:
          requires:
            - build
            - test
            - deploy # Notification runs after all core jobs complete
          filters:
            branches:
              only: main
